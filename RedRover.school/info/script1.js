// Запись в элемент HTML с использованием            innerHTML.
// Запись в вывод HTML с использованием       ?¿document.write().
// Запись в окно оповещения с использованием    window.alert().
// Запись в консоль браузера с использованием   console.log()

//====================  Типы данных  ======================
//    string        строка
//    number        числ.значение
//    boolean   true/false   истина/ложь
//    null          ничего
//    undefined     не определен
//    bigint        большие числовые данные
//    symbol
//    object  -later  объект

//==============  Перенос на следующую строку  ===============
//document.write(a+b+c)
//document.write(a, <br> c, <br> b)
//document.write(a, ,c, ,b)
  
// =============  Операторы || (или)    && (и)    !(не)=============
//===========Приоритет оператора (и) && больше, чем (или) ||, поэтому он выполняется раньше======
// console.log (true || true) ; // true
// console.log (false || true); // true
// console.log (true  || false); //true
// console.log (false || false); // false

// console.log (true && true ); // true
// console.log (false && true); // false
// console.log (true  && false); //false
// console.log (false && false); // false

// ============================== alert() and promt()  ==============================
// alert('Welcome to our site!')
// let inputName = prompt('Plese, enter your name!')
// document.write(`Hello ${inputName}`)

//=====|=============+=====+========×××××================÷÷==============÷=================
//Операнд – то, к чему применяется оператор. Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».
//Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный //минус "-" меняет знак числа на противоположный:

//let x = 1; 
//x = -x;
//alert( x ); // -1, применили унарный минус

//let x = 1;
//y = 3; 
//alert( y - x ); // 2, бинарный минус вычитает значения

//============= Результат a % b – это остаток от целочисленного деления a на b.
//============= Оператор возведения в степень a ** b возводит a в степень b
// alert( 2 ** 2 ); // 2² = 4 
//alert( 2 ** 3 ); // 2³ = 8 
//alert( 2 ** 4 ); // 2⁴ = 16

//alert( 4 ** (1/2) ); // 2 (степень 1/2 эквивалентна взятию квадратного корня) 
//alert( 8 ** (1/3) ); // 2 (степень 1/3 эквивалентна взятию кубического корня)

//=================== Сложение строк при помощи бинарного +  =====================

//Обычно при помощи плюса '+' складывают числа.
//Но если бинарный оператор '+' применить к строкам, то он их объединяет в одну:

//let s = "моя" + "строка";
//alert(s); // моя строка

//alert( '1' + 2 ); // "12"
// alert( 2 + '1' ); // "21"

//alert(2 + 2 + '1' ); // будет "41", а не "221"

//Сложение и преобразование строк — это особенность бинарного плюса +. Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.

//alert( 6 - '2' ); // 4, '2' приводится к числу 
//alert( '6' / '2' ); // 3, оба операнда приводятся к числам

//================== Приведение к числу, унарный + =====================
//Плюс + существует в двух формах: бинарной, которую мы использовали выше, и унарной.
//Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами. Но если операнд не число, унарный плюс преобразует его в число.

// Не влияет на числа 
//let x = 1; alert( +x ); // 1 
//let y = -2; 
//alert( +y ); // -2 

// Преобразует не числа в числа 
//alert( +true ); // 1 
//alert( +"" ); // 0

// ========================== Инкремент ++ увеличивает переменную на 1:==================================
// let counter = 2;
// counter++;        // работает как counter = counter + 1, просто запись короче
// alert( counter ); // 3

// ========================= Декремент -- уменьшает переменную на 1:=====================================
// let counter = 2;
// counter--;        // работает как counter = counter - 1, просто запись короче
// alert( counter ); // 1








